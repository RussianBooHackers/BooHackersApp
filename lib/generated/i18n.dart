import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale _newLocale) {
    _shouldReload = true;
    I18n._locale = _newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Подождите, идёт загрузка..."
  String get loading => "Подождите, идёт загрузка...";
  /// "Boohack"
  String get title => "Boohack";
  /// "Название отсутствует"
  String get noTitle => "Название отсутствует";
  /// "Описание отсутствует"
  String get noDesc => "Описание отсутствует";
  /// "Местоположение не установлено"
  String get noLocation => "Местоположение не установлено";
  /// "Подождите, мы определяем ваше местоположение"
  String get findLocation => "Подождите, мы определяем ваше местоположение";
  /// "Для корректной работы, приложению нужен доступ к вашей геопозиции"
  String get needLocation => "Для корректной работы, приложению нужен доступ к вашей геопозиции";
  /// "Подтвердить"
  String get confirm => "Подтвердить";
  /// "Отменить"
  String get cancel => "Отменить";
  /// "Бар не выбран"
  String get noBar => "Бар не выбран";
  /// "Ближайший бар #${name}"
  String nearestBar(String name) => "Ближайший бар #${name}";
  /// "Неправильный email или пароль"
  String get wrongLoginOrPassword => "Неправильный email или пароль";
  /// "История"
  String get history => "История";
  /// "Email"
  String get mail => "Email";
  /// "Пароль"
  String get password => "Пароль";
  /// "Повторите пароль"
  String get rePassword => "Повторите пароль";
  /// "Пароли не совпадают"
  String get passwordDoesntMatch => "Пароли не совпадают";
  /// "Имя"
  String get name => "Имя";
  /// "Фамилия"
  String get surname => "Фамилия";
  /// "Войти"
  String get entry => "Войти";
  /// "Регистрация"
  String get registration => "Регистрация";
  /// "Считать QR"
  String get readQR => "Считать QR";
  /// "Обратная связь"
  String get feedback => "Обратная связь";
  /// "Нет аккаунта? "
  String get notHaveAccount => "Нет аккаунта? ";
  /// "Есть аккаунт? "
  String get haveAccount => "Есть аккаунт? ";
  /// "Вход по логину"
  String get entranceWithLogin => "Вход по логину";
  /// "Отсутствует подключение к интернету. Проверьте соединение"
  String get networkError => "Отсутствует подключение к интернету. Проверьте соединение";
  /// "Отправить"
  String get send => "Отправить";
  /// "Опишите вашу проблему"
  String get describeYourProblem => "Опишите вашу проблему";
  /// "Сообщить о проблеме"
  String get reportProblem => "Сообщить о проблеме";
  /// "закрыть"
  String get close => "закрыть";
}

class _I18n_ru_RU extends I18n {
  const _I18n_ru_RU();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  /// "Wait please, loading..."
  @override
  String get loading => "Wait please, loading...";
  /// "Boohack"
  @override
  String get title => "Boohack";
  /// "Title is undefined"
  @override
  String get noTitle => "Title is undefined";
  /// "Description is undefined"
  @override
  String get noDesc => "Description is undefined";
  /// "Location is undefined"
  @override
  String get noLocation => "Location is undefined";
  /// "Подождите, мы определяем ваше местоположение"
  @override
  String get findLocation => "Подождите, мы определяем ваше местоположение";
  /// "Для корректной работы, приложению нужен доступ к вашей геопозиции"
  @override
  String get needLocation => "Для корректной работы, приложению нужен доступ к вашей геопозиции";
  /// "Confirm"
  @override
  String get confirm => "Confirm";
  /// "Cancel"
  @override
  String get cancel => "Cancel";
  /// "Bar not found"
  @override
  String get noBar => "Bar not found";
  /// "Nearest bar #${name}"
  @override
  String nearestBar(String name) => "Nearest bar #${name}";
  /// "Wrong email or password"
  @override
  String get wrongLoginOrPassword => "Wrong email or password";
  /// "History"
  @override
  String get history => "History";
  /// "Email"
  @override
  String get mail => "Email";
  /// "Password"
  @override
  String get password => "Password";
  /// "Re enter password"
  @override
  String get rePassword => "Re enter password";
  /// "Passwords doesnt match"
  @override
  String get passwordDoesntMatch => "Passwords doesnt match";
  /// "Name"
  @override
  String get name => "Name";
  /// "Surname"
  @override
  String get surname => "Surname";
  /// "Login"
  @override
  String get entry => "Login";
  /// "Register"
  @override
  String get registration => "Register";
  /// "Read QR"
  @override
  String get readQR => "Read QR";
  /// "Feedback"
  @override
  String get feedback => "Feedback";
  /// "Dont have account? "
  @override
  String get notHaveAccount => "Dont have account? ";
  /// "Already have accout?"
  @override
  String get haveAccount => "Already have accout?";
  /// "Вход по логину"
  @override
  String get entranceWithLogin => "Вход по логину";
  /// "Отсутствует подключение к интернету. Проверьте соединение"
  @override
  String get networkError => "Отсутствует подключение к интернету. Проверьте соединение";
  /// "Отправить"
  @override
  String get send => "Отправить";
  /// "Опишите вашу проблему"
  @override
  String get describeYourProblem => "Опишите вашу проблему";
  /// "Сообщить о проблеме"
  @override
  String get reportProblem => "Сообщить о проблеме";
  /// "close"
  @override
  String get close => "close";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("ru", "RU"),
      Locale("en", "US")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? locale.toString() : "";
    final String languageCode = I18n._locale != null ? locale.languageCode : "";
    if ("ru_RU" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_ru_RU());
    }
    else if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("ru" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_ru_RU());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}